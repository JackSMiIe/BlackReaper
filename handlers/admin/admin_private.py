from aiogram import Router, types, F
from aiogram.filters import Command

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from sqlalchemy.ext.asyncio import AsyncSession

from database.product_orm.add_product import add_product_to_db
from filters.chat_types import ChatTypeFilter, IsAdmin
from kbds.inline import get_inlineMix_btns
from kbds.reply import get_keyboard, ADMIN_KB

admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin
@admin_router.message(Command("admin"))
async def admin_features(message: types.Message):
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å ‚¨áÔ∏è", reply_markup=ADMIN_KB)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ 'üì¶ –¢–æ–≤–∞—Ä—ã'
@admin_router.message(F.text == 'üì¶ –¢–æ–≤–∞—Ä—ã')
async def menu_cmd(message: types.Message):
    await message.answer(
        '<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>',
        reply_markup=get_inlineMix_btns(btns={
            'üõí –¢–æ–≤–∞—Ä—ã': 'add_product_',  # –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
            'üéâ –ê–∫—Ü–∏—è': 'add_promotion_',  # –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é
            '‚è≥ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥': 'trial_period_',  # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            'üìä –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç': 'product_range_',  # –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
            'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'main_menu_'  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        }),
        parse_mode='HTML'  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏
    )

""" --- –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ --- """
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
class AddProduct(StatesGroup):
    name = State()          # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    count_day = State()     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    price = State()         # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
    description = State()   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'
@admin_router.callback_query(F.data.startswith('add_product_'))
async def start_adding_product(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddProduct.name)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 'name'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router.message(AddProduct.name, F.text)
async def process_product_name(message: types.Message, state: FSMContext):
    await state.update_data(product_name=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:")  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    await state.set_state(AddProduct.count_day)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 'count_day'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
@admin_router.message(AddProduct.count_day, F.text)
async def process_subscription_days(message: types.Message, state: FSMContext):
    if not message.text.isdigit():  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π!")  # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ
        return
    await state.update_data(subscription_days=int(message.text))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:")  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
    await state.set_state(AddProduct.price)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 'price'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
@admin_router.message(AddProduct.price, F.text)
async def process_product_price(message: types.Message, state: FSMContext):
    try:
        price_value = float(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
        if price_value < 80:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 80!")  # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –º–µ–Ω—å—à–µ 80
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏!")  # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ
        return

    await state.update_data(product_price=price_value)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):", reply_markup=get_keyboard('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', sizes=(1,)))  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    await state.set_state(AddProduct.description)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 'description'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router.message(AddProduct.description, F.text)
async def process_product_description(message: types.Message, state: FSMContext, session: AsyncSession):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±—É–¥–µ—Ç None
    description_text = message.text if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None
    await state.update_data(product_description=description_text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç—Ç–∞–ø–∞—Ö

    try:
        await add_product_to_db(session, data)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
        await message.answer(
            "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_inlineMix_btns(btns={
                '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç': '–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç_',
                '–ù–∞–∑–∞–¥': '–Ω–∞–∑–∞–¥_'
            })
        )
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
    finally:
        await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞

"""--- –ö–æ–Ω–µ—Ü –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ---"""



